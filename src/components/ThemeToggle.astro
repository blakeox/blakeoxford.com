---
---
<button 
  id="theme-toggle"
  type="button"
  class="p-2 rounded-md text-navbar-text dark:text-navbar-textDark hover:bg-navbar-hoverBackground dark:hover:bg-navbar-hoverBackgroundDark focus:outline-none focus:ring-2 focus:ring-navbar-text dark:focus:ring-navbar-textDark transition-colors duration-200"
  aria-label="Toggle between dark and light mode"
>
  <span class="sr-only">Toggle Theme</span>
  
  <!-- Moon SVG (shows in light mode) -->
  <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 block dark:hidden" viewBox="0 0 24 24" fill="currentColor">
    <path d="M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" />
  </svg>
  
  <!-- Sun SVG (shows in dark mode) -->
  <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 hidden dark:block" viewBox="0 0 24 24" fill="currentColor">
    <path d="M12 2.25a.75.75 0 01.75.75v2.25a.75.75 0 01-1.5 0V3a.75.75 0 01.75-.75zM7.5 12a4.5 4.5 0 119 0 4.5 4.5 0 01-9 0zM18.894 6.166a.75.75 0 00-1.06-1.06l-1.591 1.59a.75.75 0 101.06 1.061l1.591-1.59zM21.75 12a.75.75 0 01-.75.75h-2.25a.75.75 0 010-1.5H21a.75.75 0 01.75.75zM17.834 18.894a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 10-1.061 1.06l1.59 1.591zM12 18a.75.75 0 01.75.75V21a.75.75 0 01-1.5 0v-2.25A.75.75 0 0112 18zM7.758 17.303a.75.75 0 00-1.061-1.06l-1.591 1.59a.75.75 0 001.06 1.061l1.591-1.59zM6 12a.75.75 0 01-.75.75H3a.75.75 0 010-1.5h2.25A.75.75 0 016 12zM6.697 7.757a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 00-1.061 1.06l1.59 1.591z" />
  </svg>
</button>

<style>
  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }
  
  .theme-toggle-spin {
    animation: spin 0.5s ease-out;
  }
  
  #theme-toggle svg {
    color: currentColor;
  }
  
  #theme-toggle:hover svg {
    filter: drop-shadow(0 0 2px currentColor);
  }
  
  /* Make the icons more visible with stronger colors & simpler selectors */
  html.dark #theme-toggle svg.dark\:block {
    color: #fbbf24 !important; /* Yellow/gold for sun in dark mode */
    display: block !important;
  }
  
  html.dark #theme-toggle svg.block {
    display: none !important;
  }
  
  html:not(.dark) #theme-toggle svg.dark\:block {
    display: none !important;
  }
  
  html:not(.dark) #theme-toggle svg.block {
    color: #6b7280 !important; /* Gray for moon in light mode */
    display: block !important;
  }
</style>

<script>
  // Init theme as early as possible to avoid FOUC (Flash of Unstyled Content)
  const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
  const savedTheme = localStorage.getItem('theme');
  
  if (savedTheme) {
    document.documentElement.classList.toggle('dark', savedTheme === 'dark');
  } else if (prefersDark) {
    document.documentElement.classList.add('dark');
  }

  document.addEventListener('DOMContentLoaded', function () {
    const btn = document.getElementById('theme-toggle');
    
    // Debug helper to display theme status in console
    const logThemeStatus = () => {
      const isDark = document.documentElement.classList.contains('dark');
      console.log(`Current theme: ${isDark ? 'dark' : 'light'}`);
      console.log(`Storage theme: ${localStorage.getItem('theme')}`);
      
      // Check if the icons are visible
      const sunIcon = document.querySelector('svg.hidden.dark\\:block');
      const moonIcon = document.querySelector('svg.block.dark\\:hidden');
      console.log('Sun icon display:', sunIcon ? getComputedStyle(sunIcon).display : 'Not found');
      console.log('Moon icon display:', moonIcon ? getComputedStyle(moonIcon).display : 'Not found');
      
      // Force a stronger styling for the icons
      if (isDark) {
        document.querySelectorAll('svg.dark\\:block').forEach(icon => {
          (icon as HTMLElement).style.color = '#fbbf24';
          (icon as HTMLElement).style.display = 'block';
        });
        document.querySelectorAll('svg.block.dark\\:hidden').forEach(icon => {
          (icon as HTMLElement).style.display = 'none';
        });
      } else {
        document.querySelectorAll('svg.dark\\:block').forEach(icon => {
          (icon as HTMLElement).style.display = 'none';
        });
        document.querySelectorAll('svg.block.dark\\:hidden').forEach(icon => {
          (icon as HTMLElement).style.color = '#6b7280';
          (icon as HTMLElement).style.display = 'block';
        });
      }
    };
    
    // Log theme status on load
    logThemeStatus();
    
    if (btn) {
      btn.addEventListener('click', function () {
        // Toggle dark class on the html element
        const root = document.documentElement;
        const isDark = root.classList.toggle('dark');
        
        // Save user preference
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
        
        // Add spin animation when toggling
        btn.classList.add('theme-toggle-spin');
        setTimeout(() => {
          btn.classList.remove('theme-toggle-spin');
        }, 500);
        
        // Log state after toggle
        console.log(`Theme switched to ${isDark ? 'dark' : 'light'} mode`);
        setTimeout(logThemeStatus, 50); // Check after a short delay to allow DOM updates
      });
    }
  });
</script>