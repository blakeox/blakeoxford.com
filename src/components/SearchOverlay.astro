---
// SearchOverlay.astro component
---

---
// SearchOverlay.astro component with enhanced functionality
---

<div id="search-overlay" class="search-overlay fixed inset-0 z-[1100] hidden">
  <div class="search-backdrop"></div>
  <div class="search-container">
    <div class="search-header">
      <div class="search-title-section">
        <h2 class="search-title">Search</h2>
        <div class="search-shortcut-hint">
          <kbd>/</kbd> to open
        </div>
      </div>
      <button 
        id="close-search" 
        class="search-close-button"
        aria-label="Close search"
      >
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
        </svg>
      </button>
    </div>
    
    <div class="search-input-container">
      <div class="search-input-wrapper">
        <svg class="search-icon" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m21 21-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
        </svg>
        <input
          id="search-input"
          type="text"
          placeholder="Search for content, projects, blog posts..."
          class="search-input"
          aria-label="Search"
          autocomplete="off"
          spellcheck="false"
        />
        <div class="search-loading hidden">
          <div class="loading-spinner"></div>
        </div>
      </div>
    </div>
    
    <div id="search-results" class="search-results">
      <div class="search-empty-state">
        <div class="empty-state-icon">
          <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m21 21-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
          </svg>
        </div>
        <h3>Start typing to search</h3>
        <p>Search through blog posts, projects, and pages</p>
      </div>
    </div>
    
    <div class="search-footer">
      <div class="search-shortcuts">
        <div class="shortcut-item">
          <kbd>↑</kbd><kbd>↓</kbd> navigate
        </div>
        <div class="shortcut-item">
          <kbd>↵</kbd> select
        </div>
        <div class="shortcut-item">
          <kbd>esc</kbd> close
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .search-overlay {
    background: var(--overlay-40);
    backdrop-filter: blur(8px);
    -webkit-backdrop-filter: blur(8px);
    display: flex;
    align-items: flex-start;
    justify-content: center;
    padding: 2rem 1rem;
    opacity: 0;
    visibility: hidden;
    transition: all 0.3s var(--ease-emphasized);
  }
  
  .search-overlay.active {
    opacity: 1;
    visibility: visible;
  }
  
  .search-backdrop {
    position: absolute;
    inset: 0;
    background: var(--color-background-dark);
    opacity: 0.8;
  }
  
  .dark .search-backdrop {
    background: var(--color-background);
    opacity: 0.9;
  }
  
  .search-container {
    position: relative;
    width: 100%;
    max-width: 42rem;
    max-height: 80vh;
    background: var(--glass-surface-bg);
    backdrop-filter: blur(var(--blur-lg));
    -webkit-backdrop-filter: blur(var(--blur-lg));
    border: var(--glass-border);
    border-radius: var(--radius-2xl);
    box-shadow: var(--elevation-5);
    overflow: hidden;
    transform: scale(0.95) translateY(-20px);
    transition: all 0.3s var(--ease-emphasized);
  }
  
  .dark .search-container {
    background: var(--glass-surface-bg-dark);
    border: var(--glass-border-dark);
  }
  
  .search-overlay.active .search-container {
    transform: scale(1) translateY(0);
  }
  
  .search-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem 1.5rem 1rem;
    border-bottom: 1px solid var(--color-neutral-light);
  }
  
  .dark .search-header {
    border-bottom-color: var(--color-neutral-dark);
  }
  
  .search-title-section {
    display: flex;
    align-items: center;
    gap: 1rem;
  }
  
  .search-title {
    font-size: var(--fs-xl);
    font-weight: var(--fw-semibold);
    color: var(--color-foreground);
    margin: 0;
  }
  
  .dark .search-title {
    color: var(--color-foreground-light);
  }
  
  .search-shortcut-hint {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: var(--fs-sm);
    color: var(--color-neutral);
  }
  
  .search-close-button {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 2.5rem;
    height: 2.5rem;
    border: none;
    background: transparent;
    color: var(--color-foreground);
    border-radius: var(--radius-lg);
    cursor: pointer;
    transition: all 0.2s var(--ease-standard);
  }
  
  .search-close-button:hover {
    background: var(--color-accent);
    color: var(--color-background);
    transform: scale(1.05);
  }
  
  .dark .search-close-button {
    color: var(--color-foreground-light);
  }
  
  .search-input-container {
    padding: 0 1.5rem 1rem;
  }
  
  .search-input-wrapper {
    position: relative;
    display: flex;
    align-items: center;
  }
  
  .search-icon {
    position: absolute;
    left: 1rem;
    width: 1.25rem;
    height: 1.25rem;
    color: var(--color-neutral);
    z-index: 1;
  }
  
  .search-input {
    width: 100%;
    padding: 1rem 1rem 1rem 3rem;
    font-size: var(--fs-lg);
    color: var(--color-foreground);
    background: var(--color-surface);
    border: 2px solid var(--color-neutral-light);
    border-radius: var(--radius-xl);
    outline: none;
    transition: all 0.2s var(--ease-standard);
  }
  
  .search-input:focus {
    border-color: var(--color-accent);
    box-shadow: 0 0 0 3px rgba(var(--color-accent), 0.1);
  }
  
  .dark .search-input {
    color: var(--color-foreground-light);
    background: var(--color-surface-dark);
    border-color: var(--color-neutral-dark);
  }
  
  .search-loading {
    position: absolute;
    right: 1rem;
    display: flex;
    align-items: center;
  }
  
  .loading-spinner {
    width: 1.25rem;
    height: 1.25rem;
    border: 2px solid var(--color-neutral-light);
    border-top: 2px solid var(--color-accent);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
  
  .search-results {
    max-height: 24rem;
    overflow-y: auto;
    overscroll-behavior: contain;
  }
  
  .search-empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 3rem 1.5rem;
    text-align: center;
  }
  
  .empty-state-icon {
    width: 3rem;
    height: 3rem;
    color: var(--color-neutral);
    margin-bottom: 1rem;
  }
  
  .search-empty-state h3 {
    font-size: var(--fs-lg);
    font-weight: var(--fw-medium);
    color: var(--color-foreground);
    margin: 0 0 0.5rem;
  }
  
  .search-empty-state p {
    color: var(--color-neutral);
    margin: 0;
  }
  
  .dark .search-empty-state h3 {
    color: var(--color-foreground-light);
  }
  
  .search-footer {
    padding: 1rem 1.5rem;
    border-top: 1px solid var(--color-neutral-light);
    background: var(--color-surface-subtle);
  }
  
  .dark .search-footer {
    border-top-color: var(--color-neutral-dark);
    background: var(--color-surface-dark-subtle);
  }
  
  .search-shortcuts {
    display: flex;
    gap: 1rem;
    justify-content: center;
  }
  
  .shortcut-item {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: var(--fs-sm);
    color: var(--color-neutral);
  }
  
  kbd {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    min-width: 1.5rem;
    height: 1.5rem;
    padding: 0 0.375rem;
    font-size: var(--fs-xs);
    font-family: var(--font-mono);
    color: var(--color-foreground);
    background: var(--color-surface);
    border: 1px solid var(--color-neutral-light);
    border-radius: var(--radius);
    box-shadow: 0 1px 0 var(--color-neutral-light);
  }
  
  .dark kbd {
    color: var(--color-foreground-light);
    background: var(--color-surface-dark);
    border-color: var(--color-neutral-dark);
    box-shadow: 0 1px 0 var(--color-neutral-dark);
  }
  
  /* Search result items */
  .search-result-item {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    padding: 1rem 1.5rem;
    text-decoration: none;
    color: inherit;
    border-bottom: 1px solid var(--color-neutral-light);
    transition: all 0.2s var(--ease-standard);
  }
  
  .search-result-item:hover,
  .search-result-item.highlighted {
    background: var(--color-accent);
    color: var(--color-background);
  }
  
  .dark .search-result-item {
    border-bottom-color: var(--color-neutral-dark);
  }
  
  .search-result-icon {
    width: 2rem;
    height: 2rem;
    flex-shrink: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--color-accent);
    color: var(--color-background);
    border-radius: var(--radius-lg);
    margin-top: 0.25rem;
  }
  
  .search-result-content {
    flex: 1;
    min-width: 0;
  }
  
  .search-result-title {
    font-size: var(--fs-base);
    font-weight: var(--fw-medium);
    margin: 0 0 0.25rem;
    line-height: var(--lh-tight);
  }
  
  .search-result-excerpt {
    font-size: var(--fs-sm);
    color: var(--color-neutral);
    margin: 0;
    line-height: var(--lh-normal);
  }
  
  .search-result-item:hover .search-result-excerpt,
  .search-result-item.highlighted .search-result-excerpt {
    color: var(--color-background);
    opacity: 0.8;
  }
  
  .search-result-type {
    font-size: var(--fs-xs);
    color: var(--color-accent);
    font-weight: var(--fw-medium);
    text-transform: uppercase;
    letter-spacing: var(--ls-wide);
    margin-bottom: 0.25rem;
  }
  
  .search-result-item:hover .search-result-type,
  .search-result-item.highlighted .search-result-type {
    color: var(--color-background);
    opacity: 0.9;
  }
  
  /* Responsive design */
  @media (max-width: 768px) {
    .search-overlay {
      padding: 1rem;
    }
    
    .search-container {
      max-height: 90vh;
    }
    
    .search-header {
      padding: 1rem 1rem 0.75rem;
    }
    
    .search-input-container {
      padding: 0 1rem 0.75rem;
    }
    
    .search-footer {
      padding: 0.75rem 1rem;
    }
    
    .search-shortcuts {
      justify-content: space-between;
    }
    
    .shortcut-item {
      font-size: 0.75rem;
    }
  }
  
  /* Reduce motion for accessibility */
  @media (prefers-reduced-motion: reduce) {
    .search-overlay,
    .search-container,
    .search-result-item {
      transition: none !important;
      animation: none !important;
    }
    
    .loading-spinner {
      animation: none !important;
    }
  }
</style>

<script>
  // Add search overlay functionality
  document.addEventListener('DOMContentLoaded', () => {
    const searchToggle = document.getElementById('search-toggle');
    const searchOverlay = document.getElementById('search-overlay');
    const closeSearch = document.getElementById('close-search');
    const searchInput = document.getElementById('search-input');
    
    if (!searchToggle || !searchOverlay || !closeSearch || !searchInput) {
      console.warn('Search elements not found. Search functionality cannot be initialized.');
      return;
    }

    // All elements are present, so searchInput is not null here
    
    // Toggle search overlay
    searchToggle.addEventListener('click', () => {
      searchOverlay.classList.toggle('hidden');
      searchOverlay.classList.toggle('flex');
      
      if (!searchOverlay.classList.contains('hidden')) {
        // Focus search input when overlay is shown
        (searchInput as HTMLInputElement).focus();
        
        // Prevent body scrolling
        document.body.style.overflow = 'hidden';
      } else {
        // Restore body scrolling
        document.body.style.overflow = '';
      }
    });
    
    // Close search overlay
    closeSearch.addEventListener('click', () => {
      searchOverlay.classList.add('hidden');
      searchOverlay.classList.remove('flex');
      document.body.style.overflow = '';
    });
    
    // Close on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !searchOverlay.classList.contains('hidden')) {
        searchOverlay.classList.add('hidden');
        searchOverlay.classList.remove('flex');
        document.body.style.overflow = '';
      }
    });
    
    // Simple search implementation
    (searchInput as HTMLInputElement).addEventListener('input', debounce(performSearch, 300));
    
    function performSearch() {
      const query = (searchInput as HTMLInputElement).value.toLowerCase();
      const resultsContainer = document.getElementById('search-results');
      
      if (!resultsContainer) return;
      
      // Clear previous results
      resultsContainer.innerHTML = '';
      
      // Show loading state
      if (query.length > 0) {
        resultsContainer.innerHTML = '<div class="text-center py-4">Searching...</div>';
        
        // You would normally fetch results from an API here
        // For now, we'll just use a timeout to simulate an API call
        setTimeout(() => {
          // This is a placeholder. In a real implementation, you would:
          // 1. Fetch search results from your backend/API
          // 2. Process the results and create HTML elements
          // 3. Append them to the results container
          
          resultsContainer.innerHTML = query.length 
            ? `<div class="text-center py-4">Search results for "${query}" would appear here.</div>` 
            : '<div class="text-center py-4">Start typing to search...</div>';
        }, 500);
      } else {
        resultsContainer.innerHTML = '<div class="text-center py-4">Start typing to search...</div>';
      }
    }
    
    // Debounce function to limit API calls
    function debounce(func: (...args: any[]) => void, wait: number) {
      let timeout: ReturnType<typeof setTimeout>;
      return function(this: unknown) {
        const context = this;
        const args = Array.from(arguments);
        clearTimeout(timeout);
        timeout = setTimeout(() => {
          func.apply(context, args);
        }, wait);
      };
    }
  });
</script>
